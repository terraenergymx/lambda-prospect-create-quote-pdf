name: Deploy Lambda with AWS SAM

on:
  push:
    branches:
      - main
      - develop

jobs:
  #--- TRABAJO PARA DESPLEGAR A STAGING ---
  deploy-staging:
    runs-on: ubuntu-latest
    # Se ejecuta solo en pushes a la rama 'develop'
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      # 1. Instala la AWS SAM CLI
      - uses: aws-actions/setup-sam@v2
      
      # 2. Configura las credenciales de AWS
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Construye el proyecto (compila TS, prepara dependencias)
      - name: Build and Package Project
        run: |
          # 1. Instala todas las dependencias para compilar TypeScript
          npm ci

          # 2. Compila el código de TypeScript a JavaScript en la carpeta 'dist'
          npm run build

          # 3. Copia package.json para saber qué dependencias instalar
          cp package.json package-lock.json dist/

          # 4. Entra a la carpeta 'dist' e instala SOLO las dependencias de producción
          cd dist && npm ci --omit=dev
      
      # 4. Despliega la pila de STAGING con SAM
      - name: Deploy Staging Stack
        run: >
          sam deploy --stack-name prospect-create-quote-pdf-staging
          --resolve-s3 ${{ secrets.SAM_CLI_S3_BUCKET }}
          --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset
          --parameter-overrides
          Environment=staging
          DbHost=${{ secrets.DB_HOST_STAGING }}
          DbPort=${{ secrets.DB_PORT_STAGING }}
          DbSecretName=${{ secrets.DB_SECRET_NAME_STAGING }}
          DbName=${{ secrets.AURORA_DB_NAME }}
          S3BucketName=${{ secrets.S3_BUCKET_STAGING }}

  #--- TRABAJO PARA DESPLEGAR A PRODUCCIÓN ---
  deploy-production:
    runs-on: ubuntu-latest
    # Se ejecuta solo en pushes a la rama 'main'
    if: github.ref == 'refs/heads/main'
    # Depende de que el deploy a staging haya sido exitoso (si tienes esa lógica)
    # needs: deploy-staging 
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - uses: aws-actions/setup-sam@v2
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build and Package Project
        run: |
          # 1. Instala todas las dependencias para compilar TypeScript
          npm ci

          # 2. Compila el código de TypeScript a JavaScript en la carpeta 'dist'
          npm run build

          # 3. Copia package.json para saber qué dependencias instalar
          cp package.json package-lock.json dist/

          # 4. Entra a la carpeta 'dist' e instala SOLO las dependencias de producción
          cd dist && npm ci --omit=dev
          
      # Despliega la pila de PRODUCCIÓN con SAM
      - name: Deploy Production Stack
        run: >
          sam deploy --stack-name prospect-create-quote-pdf-production
          --resolve-s3 ${{ secrets.SAM_CLI_S3_BUCKET }}
          --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset
          --parameter-overrides
          Environment=production
          DbHost=${{ secrets.DB_HOST_PRODUCTION }}
          DbPort=${{ secrets.DB_PORT_PRODUCTION }}
          DbSecretName=${{ secrets.DB_SECRET_NAME_PRODUCTION }}
          DbName=${{ secrets.AURORA_DB_NAME }}
          S3BucketName=${{ secrets.S3_BUCKET_PRODUCTION }}